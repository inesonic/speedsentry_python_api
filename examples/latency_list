#!/usr/bin/python3
#-*-python-*-##################################################################
# Copyright 2021-2022 Inesonic, LLC
# All Rights Reserved
###############################################################################

"""
Python command-line tool to test and demonstrate the /v1/latency/list endpoint
and associated Python API functions.

"""

###############################################################################
# Import:
#

import sys
import argparse
import json

import speedsentry

###############################################################################
# Globals:
#

VERSION = "1a"
"""
The tool version number.

"""

DESCRIPTION = """
Copyright 2021-2022 Inesonic, LLC

You can use this small command line tool to demonstrate the
/v1/latency/list REST API endpoint.

"""

###############################################################################
# Main:
#

command_line_parser = argparse.ArgumentParser(description = DESCRIPTION)

command_line_parser.add_argument(
    "-v",
    "--version",
    action = 'version',
    version = VERSION
)

command_line_parser.add_argument(
    "-i",
    "--id",
    help = "You can use this switch to specify the customer identifier.",
    type = str,
    dest = 'customer_identifier'
)

command_line_parser.add_argument(
    "-s",
    "--secret",
    help = "You can use this switch to specify the customer secret.  "
           "The provided secret should be base-64 encoded.",
    type = str,
    dest = 'customer_secret'
)

command_line_parser.add_argument(
    "-S",
    "--start",
    help = "You can use this switch to specify a starting Unix timestamp "
           "value.",
    type = int,
    default = None,
    dest = "start_timestamp"
)

command_line_parser.add_argument(
    "-e",
    "--end",
    help = "You can use this switch to specify a ending Unix timestamp "
           "value.",
    type = int,
    default = None,
    dest = "end_timestamp"
)

command_line_parser.add_argument(
    "-m",
    "--monitor-id",
    help = "You can use this switch to specify a specific monitor ID to "
           "obtain latency data for.",
    type = int,
    default = None,
    dest = "monitor_id"
)

command_line_parser.add_argument(
    "-r",
    "--region-id",
    help = "You can use this switch to specify a specific region ID to "
           "obtain latency data for.",
    type = int,
    default = None,
    dest = "region_id"
)

arguments = command_line_parser.parse_args()
customer_identifier = arguments.customer_identifier
customer_secret = arguments.customer_secret
start_timestamp = arguments.start_timestamp
end_timestamp = arguments.end_timestamp
monitor_id = arguments.monitor_id
region_id = arguments.region_id

api = speedsentry.SpeedSentry(
    customer_identifier = customer_identifier,
    customer_secret = customer_secret
)

args = dict()
if start_timestamp is not None:
    args['start_timestamp'] = start_timestamp

if end_timestamp is not None:
    args['end_timestamp'] = end_timestamp

if monitor_id is not None:
    args['monitor_id'] = monitor_id

if region_id is not None:
    args['region_id'] = region_id

latency_data = api.latency_list(**args)
print(json.dumps(latency_data, indent = 4))
